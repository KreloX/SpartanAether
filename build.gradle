buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url 'https://maven.minecraftforge.net' }
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'idea'
    id 'maven-publish'
    id 'io.github.0ffz.github-packages' version '[1,2)'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'


version = minecraft_version + '-' + mod_version
group = mod_group_id
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory file('run')

            arg "-mixin.config=spartantoolkit.mixins.json"
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('run')

            arg "-mixin.config=spartantoolkit.mixins.json"
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory file('run')

            arg "-mixin.config=spartantoolkit.mixins.json"
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('run')

            arg "-mixin.config=spartantoolkit.mixins.json"
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name "Modrinth"
        url "https://api.modrinth.com/maven"
    }
    maven githubPackage.invoke("KreloX/SpartanToolkit")
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("maven.modrinth:spartan-weaponry:${spartan_weaponry_version}")
    implementation fg.deobf("krelox.spartantoolkit:spartantoolkit:${minecraft_version}-${spartan_toolkit_version}")

    implementation fg.deobf("maven.modrinth:aether:${minecraft_version}-${aether_version}")
    compileOnly fg.deobf("maven.modrinth:deep-aether:${minecraft_version}-${deep_aether_version}")
    runtimeOnly fg.deobf("maven.modrinth:deep-aether:${minecraft_version}-${deep_aether_version}")
    runtimeOnly fg.deobf("maven.modrinth:geckolib:${geckolib_version}")
    runtimeOnly fg.deobf("maven.modrinth:aeroblender:r${minecraft_version}-${aeroblender_version}")
    runtimeOnly fg.deobf("maven.modrinth:terrablender:${terrablender_version}")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version       : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version           : forge_version, forge_version_range: forge_version_range,
            loader_version_range    : loader_version_range,
            spartan_weaponry_version: spartan_weaponry_version,
            spartan_toolkit_version : spartan_toolkit_version, spartan_toolkit_limit: spartan_toolkit_limit,
            aether_version          : aether_version,
            deep_aether_version     : deep_aether_version, geckolib_version: geckolib_version,
            aeroblender_version     : aeroblender_version, terrablender_version: terrablender_version,
            mod_id                  : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_issue_tracker       : mod_issue_tracker, mod_homepage: mod_homepage, mod_credits: mod_credits,
            mod_authors             : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : name,
                "Implementation-Version"  : jar.archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

mixin {
    config "${mod_id}.mixins.json"
    add sourceSets.main, "${mod_id}.refmap.json"
}
